name: Deploy Infrastructure with Terraform
run-name: Deploy AWS infrastructure for ${{ inputs.environment }}

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        type: choice
        options:
          - qa
          - poc
          - copilotmigration
          - test
          - preview
          - training
#          - production

env:
  aws_role: ${{ inputs.environment == 'production'
    && 'arn:aws:iam::820242920762:role/GitHubActionsRole'
    || 'arn:aws:iam::393416225559:role/GithubDeployMavisAndInfrastructure' }}
  tf_dir: terraform/app

jobs:
  TerraformPlan:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.aws_role }}
          aws-region: eu-west-2
      - name: Install terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.5
      - name: Install AWS Cli
        run: |
          sudo snap install --classic aws-cli
      - name: Initialize backend
        working-directory: ${{ env.tf_dir }}
        run: |
          terraform init -backend-config="env/${{ inputs.environment }}-backend.hcl"
          APPLICATION=$(terraform output -raw codedeploy_application_name)
          APPLICATION_GROUP=$(terraform output -raw codedeploy_deployment_group_name)
          CLUSTER_NAME=$(terraform output -raw mavis_cluster_name)
          SERVICE_NAME=$(terraform output -raw mavis_service_name)
          if [ "$(terraform state list | wc -l)" -eq 0 ]; then
            echo "No existing state found. Skipping deployment check."
            STATE_EXISTS=false
          else
            STATE_EXISTS=true
          fi
      - name: Check if any deployments are running
        if: ${{ env.STATE_EXISTS }}
        run: |
          running_deployment=$(aws deploy list-deployments --application-name $APPLICATION_NAME \
          --deployment-group-name $APPLICATION_GROUP --include-only-statuses InProgress \
          --query 'deployments[0]' --output text)
          if [ "$running_deployment" -ne "none" ]; then
            echo "A mavis deployment for ${{ inputs.environment }} is currently running: $running_deployment"
            echo "Aborting infrastructure deployment"
            exit 1
          fi
      - name: Get currently deployed image digest
        if: ${{ env.STATE_EXISTS }}
        run: |
          TASK_DEFINITION_ARN=$(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME \
          --query "services[0].taskDefinition" --output text)
          MAVIS_IMAGE=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION_ARN \
          --query "taskDefinition.containerDefinitions[0].image" --output text)
          echo "DIGEST=${MAVIS_IMAGE#*@}"
      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.tf_dir }}
        run: |
          if [ -z "$DIGEST" ]; then
            echo "No existing image digest found. Running terraform plan with dummy image_digest."
            terraform plan -var="image_digest=dummy_digest" -var-file="env/${{ inputs.environment }}.tfvars" \
            -out ${{ runner.temp }}/tfplan
          else
            echo "Running terraform plan with image_digest=$DIGEST"
            terraform plan -var="image_digest=$DIGEST" -var-file="env/${{ inputs.environment }}.tfvars" \
            -out ${{ runner.temp }}/tfplan
          fi
      - name: Validate the changes
        run: |
          ./terraform/scripts/validate_plan.sh ${{ runner.temp }}/tfplan
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: ${{ runner.temp }}/tfplan
  ApplyUpdate:
    runs-on: ubuntu-latest
    needs: TerraformPlan
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.aws_role }}
          aws-region: eu-west-2
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: ${{ runner.temp }}/tfplan
      - name: Install terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.5
      - name: Apply the changes
        working-directory: ${{ env.tf_dir }}
        run: |
          terraform init -backend-config="env/${{ inputs.environment }}-backend.hcl"
          terraform apply ${{ runner.temp }}/tfplan
