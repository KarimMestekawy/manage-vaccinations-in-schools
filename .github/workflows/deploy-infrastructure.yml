name: Deploy infrastructure
run-name: Deploy infrastructure for ${{ inputs.environment }}

on:
  workflow_dispatch:
    inputs:
      environment:
        description: Deployment environment
        required: true
        type: choice
        options:
          - qa
          - poc
          - copilotmigration
          - test
          - preview
          - training
          - production
      docker_sha:
        description: "Docker image sha to deploy. This is used only if no existing task definition is found"
        required: false
        type: string
  workflow_call:
    inputs:
      environment:
        description: Deployment environment
        required: true
        type: string

env:
  aws_role: ${{ inputs.environment == 'production'
    && 'arn:aws:iam::820242920762:role/GithubDeployMavisAndInfrastructure'
    || 'arn:aws:iam::393416225559:role/GithubDeployMavisAndInfrastructure' }}
  tf_dir: terraform/app

jobs:
  plan:
    name: Terraform plan
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.aws_role }}
          aws-region: eu-west-2
      - name: Install terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.5
      - name: Install AWS Cli
        run: sudo snap install --classic aws-cli
      - name: Check if any deployments are running
        working-directory: ${{ env.tf_dir }}
        run: |
          ../scripts/check-for-running-deployments.sh ${{ inputs.environment }}
      - name: Get image digest
        working-directory: ${{ env.tf_dir }}
        run: |
          TASK_DEFINITION_EXISTS=$(terraform state list | grep aws_ecs_task_definition.task_definition) || true
          if [ -z "$TASK_DEFINITION_EXISTS" ]; then
            echo "No existing task definition found. Using the provided docker image sha"
            DIGEST=${{ inputs.docker_sha }}
          else
            DIGEST=$(terraform state show aws_ecs_task_definition.task_definition | grep -oP '(?<=mavis/webapp@)sha256:[0-9a-z]{64}')
          fi
          if [ -z "$DIGEST" ]; then
            echo "Image digest not found in the currently deployed task definition"
            echo "Aborting infrastructure deployment"
            exit 1
          fi
          echo "DIGEST=$DIGEST" >> $GITHUB_ENV
          echo "Image digest in terraform state: $DIGEST"
      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.tf_dir }}
        run: |
          set -e
          terraform plan -var="image_digest=$DIGEST" -var-file="env/${{ inputs.environment }}.tfvars" \
          -out ${{ runner.temp }}/tfplan | tee ${{ runner.temp }}/tf_stdout
      - name: Validate the changes
        run: |
          set -e
          ./terraform/scripts/validate_plan.sh ${{ runner.temp }}/tf_stdout
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan_infrastructure
          path: ${{ runner.temp }}/tfplan

  apply:
    name: Terraform apply
    runs-on: ubuntu-latest
    needs: plan
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.aws_role }}
          aws-region: eu-west-2
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan_infrastructure
          path: ${{ runner.temp }}
      - name: Install terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.5
      - name: Apply the changes
        working-directory: ${{ env.tf_dir }}
        run: |
          set -e
          terraform init -backend-config="env/${{ inputs.environment }}-backend.hcl" -upgrade
          terraform apply ${{ runner.temp }}/tfplan
